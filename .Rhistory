install.packages("devtools")
source('C:/Projects/coursera/datasciencecoursera/sample.R')
add2(10,15)
source('C:/Projects/coursera/datasciencecoursera/sample.R')
source('C:/Projects/coursera/datasciencecoursera/sample.R')
x <- 1:20
above(x,12)
source('C:/Projects/coursera/datasciencecoursera/sample.R')
above(x)
source('C:/Projects/coursera/datasciencecoursera/sample.R')
columnMean(airquality)
source('C:/Projects/coursera/datasciencecoursera/sample.R')
columnMean(airquality)
source('C:/Projects/coursera/datasciencecoursera/sample.R')
columnMean(airquality)
columnMean(airquality)
source('C:/Projects/coursera/datasciencecoursera/sample.R')
f(45)
?paste
search()
x <- as.Date("1970-01-01")
x
unclass(x)
weekday(x)
weekdays(x)
months(x)
quarters(x)
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
names(unclass(p))
p$sec
unclass(x)
swirl
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
?which
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
swirl()
submit()
telegram("This is a test!")
submit()
mad_libs(place="Jupiter",adjective="Red",noun="Dog")
submit()
submit()
submit()
"Good" %p% "Job"
"Good" %p% "Job"
submit()
submit()
"Good" % "Job"
"Good" %p% "Job"
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list)
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
d1 <- Sys.Date()
class(d1)
unclass(d1)
dl
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
x <- 1:10
if (x) { x <- 0}
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1))
lapply(x, runif)
x <- 1:4
lapply(x, runif)
x <- 1:4
lapply(x, runif, min=0, max=10)
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x, mean)
sapply(x, mean)
str(apply)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x
apply(x, 1, sum)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
s
a
str(mapply)
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) { rnorm(n, mean, sd) }
noise(5, 1, 2)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10, runif(10), rnorm(10, 1)))
x
x <- c(rnorm(10), runif(10), rnorm(10, 1)))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
tapply(x, f, range, simplify=TRUE)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
tapply(x, f, mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[, c("Ozone", Solar.R", "Wind"")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind"")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind)]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]), na.rm=TRUE)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")],na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop=TRUE))
log(-1)
printmessage(5)
source('C:/Projects/coursera/datasciencecoursera/Lesson3.R')
printmessage(5)
printmessage(NA)
printmessage <- function(x) {
if (x > 0) {
print("x is greater than zero")
}
else {
print("x is less than or equal to zero")
}
invisible(x)
}
debugSource('C:/Projects/coursera/datasciencecoursera/Lesson3.R')
print("x is less than or equal to zero")
debugSource('C:/Projects/coursera/datasciencecoursera/Lesson3.R')
debugSource('C:/Projects/coursera/datasciencecoursera/Lesson3.R')
printmessage(5)
debugSource('C:/Projects/coursera/datasciencecoursera/Lesson3.R')
source('C:/Projects/coursera/datasciencecoursera/Lesson3.R')
printmessage(NA)
traceback
traceback()
debug(printmessage)
printmessage(NA)
trace(printmessage)
trace(mean)
?trace
mean(x)
traceback()
traceback()
mean(1:5)
traceback()
lm(y ~ x)
traceback()
lm(x ~ 2)
debug(lm)
lm(y ~ x)
lm(y ~ x)
?debug
debug(lm, on=FALSE)
undebug(lm)
loadlibrary(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
flag_colors
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
iris
tapply(iris, iris$Species)
tapply(iris$Sepal.Length, iris$Species)
tapply(iris$Sepal.Length, iris$Species, mean)
filter <- iris[iris$Species == "virginica"]
filter <- iris$Species == "virginica"
filter
filtered <- iris[filter]
filtered <- iris$Sepal.Length[filter]
filtered
mean(filtered)
iris
colMeans(iris)
?colMeans
apply(iris, 2, mean)
apply(iris[,1:4], 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris, 2, mean, rm.na=TRUE)
apply(iris, 1, mean)
colMeans(iris)
?colMeans
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars
with(mtcars, tapply(hp, cyl, mean))
debug(ls)
ls
apply()
apply(iris)
undebug(ls)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
source('C:/Projects/coursera/ProgrammingAssignment2/cachematrix.R')
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
c <- makeCacheMatrix(c)
c
cacheSolve(c)
traceback()
source('C:/Projects/coursera/ProgrammingAssignment2/cachematrix.R')
c=rbind(c(1, -1/4), c(-1/4, 1))
c <- makeCacheMatrix(c)
c
cacheSolve(c)
traceback()
debugSource('C:/Projects/coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(c)
debugSource('C:/Projects/coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(c)
debugSource('C:/Projects/coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(c)
c=rbind(c(1, -1/4), c(-1/4, 1))
d = makeVector(c)
d = makeCacheMatrix(c)
cacheSolve(d)
cacheSolve(d)
source('C:/Projects/coursera/ProgrammingAssignment2/cachematrix.R')
setwd("C:\Projects\coursera\rprogramming")
setwd("C:\\Projects\\coursera\\rprogramming")
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
rankall("heart attack", 20)
View(stateData)
stateData[num]
View(stateData)
length(stateData)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
View(stateData)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
View(stateData)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
length(stateData)
?subset
rankall("heart attack", 20)
View(stateData)
length(stateData)
count(stateData)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
rankall("heart attack", 20)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
states
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
View(patientCounts)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
?rowCount
rankall("heart attack", 20)
rowCount(stateData)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
rankall("heart attack", 20)
source('C:/Projects/coursera/rprogramming/rankall.R')
tail(rankall("pneumonia", "worst"),3)
tail(rankall("pneumonia", "worst"),3)
debugSource('C:/Projects/coursera/rprogramming/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('C:/Projects/coursera/rprogramming/rankall.R')
tail(rankall("pneumonia", "worst"),3)
tail(rankall("pneumonia", num="worst"))
tail(rankall("pneumonia", "worst"),3)
ret <- rankall("penumonia","worst")
ret <- rankall("pneumonia","worst")
source('C:/Projects/coursera/rprogramming/rankall.R')
ret <- rankall("pneumonia","worst")
ret
source('C:/Projects/coursera/rprogramming/rankall.R')
ret
ret <- rankall("pneumonia","worst")
source('C:/Projects/coursera/rprogramming/rankall.R')
ret <- rankall("pneumonia","worst")
source('C:/Projects/coursera/rprogramming/rankall.R')
ret <- rankall("pneumonia","worst")
ret
source('C:/Projects/coursera/rprogramming/rankall.R')
source('C:/Projects/coursera/rprogramming/rankall.R')
source('C:/Projects/coursera/rprogramming/rankall.R')
ret <- rankall("pneumonia","worst")
ret
tail(ret)
source('C:/Projects/coursera/rprogramming/rankall.R')
ret <- rankall("pneumonia","worst")
ret
ret
source('C:/Projects/coursera/rprogramming/rankall.R')
ret <- rankall("pneumonia","worst")
ret
source('C:/Projects/coursera/rprogramming/rankall.R')
tail(rankall("heartfailure"), 10)
tail(rankall("heart failure"), 10)
rankhospital("MN", "heart attack", "worst")
